#!/usr/bin/env bash

TOTAL_CORES='0-11'               # All CPUs
HOST_CORES='0,6'                 # Cores to reserve for host
VIRT_CORES='1-5,7-11'            # Cores to reserve for VM
DISPLAY_NUMBER='2'               # Display number according to ddcutil detect
DISPLAY_INPUT_VM='0x0f'          # DisplayPort according to ddcutil detect
DISPLAY_INPUT_HOST='0x03'        # DVI according to ddcutil detect

# Log a message in dmesg
log() {
  local msg="$*"
  printf "libvirt-hook-qemu: %s\n" "${msg}" >/dev/kmsg
}

# Split a string based on delimiter
# Usage: split foo,bar ,
split() {
  local string="$1"
  local delimiter="$2"
  IFS=$'\n' read -d "" -ra arr <<< "${1//$2/$'\n'}"
  printf '%s\n' "${arr[@]}"
}

# List all CPUs individually given a range
# Usage: listcpus 2-5,8-11
listcpus() {
  local range="$1"
  local cpus=()
  groups=$(split ${range} ,)
  for g in ${groups[@]}; do
    begin=$(echo ${g} | cut -d- -f1)
    end=$(echo ${g} | cut -d- -f2)
    cpus+=($(seq ${begin} ${end}))
  done
  printf '%s\n' "${cpus[@]}"
}

# Configure allowed CPUs
set_cpu() {
  systemctl set-property --runtime -- user.slice AllowedCPUs=${HOST_CORES}
  systemctl set-property --runtime -- system.slice AllowedCPUs=${HOST_CORES}
  systemctl set-property --runtime -- init.scope AllowedCPUs=${HOST_CORES}
}

# Restore allowed CPUs
unset_cpu() {
  systemctl set-property --runtime -- user.slice AllowedCPUs=${TOTAL_CORES}
  systemctl set-property --runtime -- system.slice AllowedCPUs=${TOTAL_CORES}
  systemctl set-property --runtime -- init.scope AllowedCPUs=${TOTAL_CORES}
}

# Set display input source
set_display_input() {
  local display="$1"
  local input="$2"

  sudo ddcutil -d ${display} setvcp 60 ${input}
}

# Configure hugepages
set_hugepages() {
  cd $(dirname "$0")
  local hugepages_needed=$(($(./vm-mem-requirements ${VM_NAME}) / HUGEPAGES_SIZE))
  local hugepages_total=$((${HUGEPAGES_ALLOCATED} + ${hugepages_needed}))

  log "Setting hugepages to ${hugepages_total}"
  sysctl vm.nr_hugepages=${hugepages_total}

  # Disable transparent hugepages
  echo never >/sys/kernel/mm/transparent_hugepage/enabled
}

# Revert hugepages
unset_hugepages() {
  local hugepages_needed=$(($(./vm-mem-requirements ${VM_NAME}) / HUGEPAGES_SIZE))
  local hugepages_total=$(($HUGEPAGES_ALLOCATED - $VM_HUGEPAGES_NEED))

  if [[ ${hugepages_total} -ge 0 ]]; then
    log "Restoring hugepages to ${hugepages_total}"
    sysctl vm.nr_hugepages=${hugepages_total}
  else
    log "Setting hugepages to 0"
    sysctl vm.nr_hugepages=0
  fi

  # Restore transparent hugepages
  echo always >/sys/kernel/mm/transparent_hugepage/enabled
}

# Load hugepages details
HUGEPAGES_SIZE=$(grep Hugepagesize /proc/meminfo | awk {'print $2'})
HUGEPAGES_SIZE=$((HUGEPAGES_SIZE * 1024))
HUGEPAGES_ALLOCATED=$(sysctl vm.nr_hugepages | awk {'print $3'})

# Load libvirt args
VM_NAME=$1
VM_ACTION=$2

case "$VM_ACTION" in
"prepare")
  # Switch display input
  set_display_input ${DISPLAY_NUMBER} ${DISPLAY_INPUT_VM}

  # Memory preparation
  sync
  echo 3 >/proc/sys/vm/drop_caches
  echo 1 >/proc/sys/vm/compact_memory

  # Set hugepages
  # set_hugepages

  # Disable transparent hugepages
  echo never >/sys/kernel/mm/transparent_hugepage/enabled

  # Create cpusets and isolate cores
  set_cpu

  # Force P-states to P0
  # echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

  # Increase stat interval
  echo 300 >/proc/sys/vm/stat_interval

  # Tune the scheduler to allow full utilization
  # echo -1 > /proc/sys/kernel/sched_rt_runtime_us
  ;;
"started")
  # Set priority level and execution policy for qemu process
  chrt -a -f -p 99 $(pidof qemu-system-x86_64)
  chrt -p $(pidof qemu-system-x86_64)

  # Set IRQ affinities
  for i in $(sed -n -e 's/ \([0-9]\+\):.*/\1/p' /proc/interrupts); do
    echo '0,6' > /proc/irq/$i/smp_affinity_list
  done &>/dev/null
  ;;
"release")
  # Switch display input
  set_display_input ${DISPLAY_NUMBER} ${DISPLAY_INPUT_HOST}

  # Restore cpusets
  unset_cpu

  # Restore hugepages
  # unset_hugepages

  # Restore stat interval
  echo 1 >/proc/sys/vm/stat_interval

  # Restore scheduler
  # echo 950000 > /proc/sys/kernel/sched_rt_runtime_us
  ;;
esac
